Doctor sign up page 

//Main




import 'package:flutter/material.dart';
import 'package:flutter_app/Doctor.dart';
import 'package:flutter_app/Patient.dart';


void main() => runApp(MyApp());
class MyApp extends StatelessWidget{
    @override
    Widget build(BuildContext context){
      return MaterialApp(title: 'My HealthBook',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
        home:Doctor(),

      );
    }
  }



//Doctor signup page source code

import 'dart:html';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/painting.dart';
import 'package:flutter_dropzone/flutter_dropzone.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:hexcolor/hexcolor.dart';
import 'package:country_picker/country_picker.dart';
import 'package:form_field_validator/form_field_validator.dart';


class Doctor extends StatefulWidget {
  @override
  State<StatefulWidget> createState() {
    return DoctorState();
  }
}
class DoctorState extends State<Doctor> {

  String _firstName;
  String _lastName;
  String _practiceName;
  String _address;
  String _unit;
  String _postalCode;
  String _province;
  String _country;
  String _phoneNumber;
  String _licenseNumber;
  String _physicianCollege;
  String _gender;
  String _title;
  String _specialization;
  String _other;

  bool value=false;



  String valueChoose;

  List ProvinceItem= ["Alberta",
    "British Columbia",
    "Manitoba",
    "New Brunswick",
    "Newfoundland and Labrador",
    "Nova Scotia",
    "Ontario", "Prince Edward Island", "Quebec", "Saskatchewan"];

  String valueGen;

  List GenderItem= ["Male", "Female", "Transgender", "Other", "Prefer not to say"];


  String valueCoun;
  List CountriesItem = ["Afghanistan", "Albania", "Algeria", "Andorra", "Angola", "Antigua and Barbuda", "Argentina", "Armenia", "Australia", "Austria", "Azerbaijan",
    "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bhutan", "Bolivia", "Bosnia and Herzegovina", "Botswana", "Brazil", "Brunei", "Bulgaria",
    " Burkina Faso", "Burundi", "Cabo Verde", "Cambodia", "Cameroon", "Canada", "Central African Republic (CAR)", "Chad", "Chile", "China", "Colombia", "Comoros", "Congo",
    "Democratic Republic of the Congo", "Republic of the Costa Rica", "Cote d'Ivoire", "Croatia", "Cuba", "Cyprus", "Czechia", "Denmark", "Djibouti", "Dominica", "Dominican Republic",
    "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Eswatini", "Ethiopia", "Fiji", "Finland", "France", "Gabon", "Gambia", "Georgia", "Germany", "Ghana",
    "Greece", "Grenada", "Guatemala", "Guinea", " Guinea-Bissau", "Guyana", "Haiti", "Honduras", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Israel", "Italy",
    "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kosovo", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein",
    "Lithuania", "Luxembourg", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Mauritania", "Mauritius", "Mexico", "Micronesia", "Moldova",
    "Monaco", "Mongolia", "Montenegro", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "New Zealand", " Nicaragua", "Niger", "Nigeria", "North Korea",
    "North Macedonia", "Norway", "Oman", "Pakistan", "Palau", "Palestine", "Panama", " Papua New Guinea", "Paraguay", "Peru", "Philippines", "Poland", "Portugal", "Qatar", "Romania",
    "Russia", "Rwanda", "  Saint Kitts and Nevis", "Saint Lucia", "Saint Vincent and the Grenadines", "Samoa", " San Marino", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Serbia",
    "Seychelles", "Sierra Leone", "Singapore", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", " South Africa", "South Korea", "South Sudan", "Spain", "Sri Lanka", "Sudan", "Suriname",
    "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", " Timor-Leste", "Togo", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Tuvalu",
    "Uganda", "Ukraine", "United Arab Emirates (UAE)", " United Kingdom (UK)", "United States of America (USA)", " Uruguay", "Uzbekistan", "Vanuatu", "Vatican City", "Venezuela", "Vietnam",
    "Yemen", "Zambia", "Zimbabwe"];

  String colorGroupValue= '';


  String valueSpec;

  List SpecializationItem = ["Acupuncturist", "Addiction Medicine Specialist", "Allergist / Immunologist", "Anesthesiologist",
    "Audiologist""Bariatric / Weight Loss Specialist", "Cardiologist", "Cardiothoracic Surgeon", "Chiropractor", "Colorectal Surgeon / Proctologist",
    "Plastic / Cosmetic Surgeon, Physician", "Dentist", "Dermatologist", "Ear Nose and Throat Doctor (ENT)", "Emergency Room Doctor", "Endocrinologist",
    "Endodontist", "Family Doctor / G.P.", "Gastroenterologist", 'Geneticist', "Gynecologist (OBGYN)", "Homeopath", "Infectious Disease Specialist",
    "Internist / Geriatrician", "Midwife", "Naturopath","Nephrologist","Neurologist","Neurosurgeon","Nurse Practitioner","Occupational Therapist",
    "Oncologist / Hematologist","Ophthalmologist","Optometrist","Oral Surgeon","Orthodontist","Orthopedic Surgeon","Osteopath",
    "Pain Management Specialist / Physical Therapist","Pathologist","Pediatrician","Perinatologist (Maternal-Fetal Medicine)","Periodontist",
    "Physiatrist / Physical Medicine &amp; Rehabilitation","Podiatrist","Psychiatrist","Psychologist","Pulmonologist","Radiation Oncologist",
    "Radiologist","Massage Therapist","Reproductive Endocrinologist","Rheumatologist","somnologist","Sports Medicine Physician","General Surgeon",
    "Therapist","Urogynecologist","Urologist"," Vascular Surgeon / Phlebologist","other"];




  final GlobalKey<FormState> _formkey = GlobalKey<FormState>();

  DropzoneViewController controller;

 

  Widget buildTitle(){
    return Text("Doctor sign up", style: GoogleFonts.lato(fontSize:25, fontWeight:FontWeight.bold ),

      textAlign: TextAlign.left,

    ); //Text

  }

  Widget buildFirstName() =>Column(


    crossAxisAlignment: CrossAxisAlignment.center,

    key: _formkey,
    children: [Text('First Name', style: GoogleFonts.lato(fontSize:18, fontWeight:FontWeight.bold)
    ),

      const SizedBox(height:44, width: 224), Align(alignment: Alignment.centerLeft), TextField(

        decoration: InputDecoration(border: InputBorder.none, filled: true, fillColor: HexColor("#F4F8FF"), suffixStyle: TextStyle(
          color: Colors.red,

        ),

        ),

      )],


  );


  Widget buildLastName()=>Column(
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [Text('Last Name', style: GoogleFonts.lato(fontSize:18, fontWeight:FontWeight.bold )
    ),
      const SizedBox(height:44, width: 224), Align(alignment: Alignment.centerRight), TextField(
        decoration: InputDecoration(border: InputBorder.none, filled: true, fillColor: HexColor("#F4F8FF"), suffixStyle: TextStyle(
          color: Colors.red,
        ),),
      )],
  );

  Widget buildPractice()=>Column(
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [Text('Name of Practice', style: GoogleFonts.lato(fontSize:18, fontWeight:FontWeight.bold )
    ),
      const SizedBox(height:44, width: 224), Align(alignment: Alignment.centerRight), TextField(
        decoration: InputDecoration(border: InputBorder.none, filled: true, fillColor: HexColor("#F4F8FF"), suffixStyle: TextStyle(
          color: Colors.red,
        ),),
      )],
  );

  Widget buildAddress()=>Column(
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [Text('Address', style: GoogleFonts.lato(fontSize:18, fontWeight:FontWeight.bold )
    ),
      const SizedBox(height:44, width: 321), Align(alignment: Alignment.centerLeft), TextField(
        decoration: InputDecoration(border: InputBorder.none, filled: true, fillColor: HexColor("#F4F8FF"), suffixStyle: TextStyle(
          color: Colors.red,
        ),),
      )],
  );
  Widget buildUnitApt()=>Column(
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [Text('Unit / Apartment #', style: GoogleFonts.lato(fontSize:18, fontWeight:FontWeight.bold )
    ),
      const SizedBox(height:44, width: 113), Align(alignment: Alignment.centerRight), TextField(
        decoration: InputDecoration(border: InputBorder.none, filled: true, fillColor: HexColor("#F4F8FF")),
      )],
  );

  Widget buildPostalCode()=>Column(
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [Text('Postal Code / Zip Code', style: GoogleFonts.lato(fontSize:18, fontWeight:FontWeight.bold )
    ),
      const SizedBox(height:44, width: 321), Align(alignment: Alignment.centerLeft), TextField(
        decoration: InputDecoration(border: InputBorder.none, filled: true, fillColor: HexColor("#F4F8FF"), suffixStyle: TextStyle(
          color: Colors.red,
        ),),
      )
    ],
  );


  Widget buildProvince()=>Column(
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [Text('Province / State', style: GoogleFonts.lato(fontSize:18, fontWeight:FontWeight.bold )
    ),
      DropdownButton(value: valueChoose,
        icon: Icon(Icons.arrow_drop_down),
        iconSize: 20,
        onChanged: (newValue){
          setState(() {
            valueChoose = newValue;
          });
        },
        items:ProvinceItem.map((valueItem){
          return DropdownMenuItem(
              value: valueItem,
              child: Text(valueItem)
          );
        }).toList(),
      ),
    ],
  );


  Widget buildCountry()=>Column(
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [Text('Country', style: GoogleFonts.lato(fontSize:18, fontWeight:FontWeight.bold )
    ),
      DropdownButton(value: valueCoun,
        hint: Text("Select"),
        icon: Icon(Icons.arrow_drop_down),
        iconSize: 20,
        onChanged: (newValue){
          setState(() {
            valueCoun = newValue;
          });
        },
        items:CountriesItem.map((valueItem){
          return DropdownMenuItem(
              value: valueItem,
              child: Text(valueItem)
          );
        }).toList(),
      ),

    ],
  );

  Widget buildPhoneNumber()=>Column(
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [Text('Phone Number', style: GoogleFonts.lato(fontSize:18, fontWeight:FontWeight.bold )
    ),
      const SizedBox(height:44, width: 224), Align(alignment: Alignment.centerLeft), TextField(
        decoration: InputDecoration(border: InputBorder.none, filled: true, fillColor: HexColor("#F4F8FF"), suffixStyle: TextStyle(
          color: Colors.red,
        ),),
      )],
  );

  Widget buildlicenseNumber()=>Column(
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [Text('License Number', style: GoogleFonts.lato(fontSize:18, fontWeight:FontWeight.bold )
    ),
      const SizedBox(height:44, width: 224), Align(alignment: Alignment.centerLeft), TextField(
        decoration: InputDecoration(border: InputBorder.none, filled: true, fillColor: HexColor("#F4F8FF"), suffixStyle: TextStyle(
          color: Colors.red,
        ),),
      )],
  );

  Widget buildPhysician()=>Column(
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [Text('Physician College Online Listing (CPSO)', style: GoogleFonts.lato(fontSize:18, fontWeight:FontWeight.bold )
    ),
      const SizedBox(height:44, width: 224), Align(alignment: Alignment.centerLeft), TextField(
        decoration: InputDecoration(border: InputBorder.none, filled: true, fillColor: HexColor("#F4F8FF"), suffixStyle: TextStyle(
          color: Colors.red,
        ),),
      )],
  );

  Widget buildGender()=>Column(
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [Text('Gender', style: GoogleFonts.lato(fontSize:18, fontWeight:FontWeight.bold )
    ),
      DropdownButton(value: valueGen,
        icon: Icon(Icons.arrow_drop_down),
        iconSize: 20,
        onChanged: (newValue){
          setState(() {
            valueGen = newValue;
          });
        },
        items:GenderItem.map((valueItem){
          return DropdownMenuItem(
              value: valueItem,
              child: Text(valueItem)
          );
        }).toList(),
      ),
    ],
  );

  Widget buildSpecialization()=>Column(
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [Text('Area of Specialization', style: GoogleFonts.lato(fontSize:18, fontWeight:FontWeight.bold )
    ),
      DropdownButton(value: valueSpec,
        icon: Icon(Icons.arrow_drop_down),
        iconSize: 20,
        onChanged: (newValue){
          setState(() {
            valueSpec = newValue;
          });
        },
        items:SpecializationItem.map((valueItem){
          return DropdownMenuItem(
              value: valueItem,
              child: Text(valueItem)
          );
        }).toList(),
      ),
    ],
  );


  Widget buildOther()=>Column(
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [Text('Please Specify Other', style: GoogleFonts.lato(fontSize:18, fontWeight:FontWeight.bold )
    ),
      const SizedBox(height:44, width: 224), Align(alignment: Alignment.centerLeft), TextField(
        decoration: InputDecoration(border: InputBorder.none, filled: true, fillColor: HexColor("#F4F8FF"), suffixStyle: TextStyle(
          color: Colors.red,
        ),),
      )],
  );


  Widget buildBrowse()=>Column(
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [Text('', style: GoogleFonts.lato(fontSize:18, fontWeight:FontWeight.bold )
    ),
      const SizedBox(height:44, width: 224), Align(alignment: Alignment.centerLeft), TextField(
        decoration: InputDecoration(border: InputBorder.none, filled: true, fillColor: HexColor("#F4F8FF"), suffixStyle: TextStyle(
          color: Colors.red,
        ),),
      )],
  );




  @override
  Widget build(BuildContext context) {

    return Scaffold(appBar:
    AppBar(leading: Padding(
      padding: const EdgeInsets.all(2.0),
      child: Image.asset(
        "C:/Users/yosie/Desktop/logo.png",
      ),
    ),
    ),
        body:  SingleChildScrollView(
          child: Container(
            margin: EdgeInsets.all(40),
            child:  Form(

              key:_formkey,
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                  buildTitle(),
                  buildFirstName(),
                  buildLastName(),
                  buildAddress(),
                  buildUnitApt(),
                  buildPostalCode(),
                  buildProvince(),
                  buildCountry(),
                  buildPhoneNumber(),
                  buildlicenseNumber(),
                  buildPhysician(),
                  buildGender(),
                  buildSpecialization(),
                  buildOther(),
                  CheckboxListTile(title: Text("I agree to the MyHealthBook and Terms & Conditions Privacy Policy"),value: value, onChanged: (bool newValue){
                    setState(() {
                      value = newValue;

                    });
                  }),

                  SizedBox(height: 2),
                  RaisedButton(
                    child: Text('Sign Up', style: TextStyle(color: Colors.blue),),
                    onPressed: () {
                      if(!_formkey.currentState.validate()){
                        return;
                      }
                      _formkey.currentState.save();
                      print(_title);
                      print(_firstName);
                      print(_lastName);
                      print(_practiceName);
                      print(_address);
                      print(_unit);
                      print(_postalCode);
                      //print(_province);
                      print(_country);
                      print(_phoneNumber);
                      print(_licenseNumber);
                      print(_physicianCollege);
                      print(_gender);
                      print(_specialization);
                      print(_other);



                    },
                  )

                ],
              ),
            ),
          ),
        )

    );
  }

}



